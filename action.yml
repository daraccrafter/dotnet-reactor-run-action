name: '.NET Reactor Run'
author: Eziriz
description: 'Runs .NET Reactor based on the operating system of the GitHub Actions runner.'
branding:
  icon: 'shield'
  color: 'blue'
inputs:
  project_file:
    description: 'Path to the .NET Reactor project file.'
    required: false
  input_paths:
    description: 'Comma-separated list of .NET assemblies to obfuscate.'
    required: false
  additional_arguments:
    description: '(Additional) command-line parameters.'
    required: false
  working_directory:
    description: 'Working directory for resolving relative paths.'
    required: false
    default: '.'
  key_file:
    description: 'Path to the strong-name key file (.snk) for signing assemblies.'
    required: false
  license:
    description: 'Provide the .NET Reactor license as either a file path or a base64-encoded string. If no license is defined .NET Reactor runs as demo version.'
    required: false
  reactordir:
    required: true
runs:
  using: "composite"
  steps:
    - name: Configure License
      run: |
            if [ -n "${{ inputs.license }}" ]; then
              if echo "${{ inputs.license }}" | grep -Eq '(\.license|\.v3lic)$'; then
                cp "${{ inputs.license }}" ${{ inputs.reactordir }}/license.v3lic
              else
                echo "${{ inputs.license }}" | base64 --decode > ${{ inputs.reactordir }}/license.v3lic
              fi
            fi
      shell: bash
    - name: Execute .NET Reactor for multiple files (in-place)
      run: |
        command="${{ inputs.reactordir }}/dotNET_Reactor"

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          command="${{ inputs.reactordir }}/dotNET_Reactor.Console.exe"
        else
          chmod +x "$command"
        fi

        # Change to the working directory if specified
        if [[ -n "${{ inputs.working_directory }}" ]]; then
          echo "Changing to working directory: ${{ inputs.working_directory }}"
          cd "${{ inputs.working_directory }}" || { echo "Failed to change directory"; exit 1; }
        fi

        # Split input_paths into an array
        IFS=',' read -ra FILES <<< "${{ inputs.input_paths }}"

        for file in "${FILES[@]}"; do
          file=$(echo $file | xargs) # Trim spaces
          if [[ -n "$file" ]]; then
            if [[ ! -f "$file" ]]; then
              echo "File not found: $file"
              exit 1
            fi

            args=" -file '$file' -targetfile '$file'" # Same input & output file

            [[ -n "${{ inputs.project_file }}" ]] && args+=" -project '${{ inputs.project_file }}'"
            [[ -n "${{ inputs.key_file }}" ]] && args+=" -snkeypair  '${{ inputs.key_file }}'"
            [[ -n "${{ inputs.additional_arguments }}" ]] && args+=" ${{ inputs.additional_arguments }}"

            echo "Running: $command $args"
            eval "$command $args"
          fi
        done
      shell: bash
