name: '.NET Reactor Run'
author: Eziriz
description: 'Runs .NET Reactor based on the operating system of the GitHub Actions runner.'
branding:
  icon: 'shield'
  color: 'blue'
inputs:
  project_file:
    description: 'Path to the .NET Reactor project file.'
    required: false
  input_paths:
    description: 'Comma-separated list of .NET assemblies to obfuscate.'
    required: false
  additional_arguments:
    description: '(Additional) command-line parameters.'
    required: false
  working_directory:
    description: 'Working directory for resolving relative paths.'
    required: false
    default: '.'
  key_file:
    description: 'Path to the strong-name key file (.snk) for signing assemblies.'
    required: false
  license:
    description: 'Provide the .NET Reactor license as either a file path or a base64-encoded string. If no license is defined .NET Reactor runs as demo version.'
    required: false
  version:
    description: 'Specify the .NET Reactor version to install. If unspecified, the latest version will be used.'
    required: false
runs:
  using: "composite"
  steps:
    - name: Download and Extract .NET Reactor
      run: |
        os_name=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
        
        exe_name="dotNET_Reactor"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          exe_name="dotNET_Reactor.Console.exe"
        fi
        
        download_url="https://raw.githubusercontent.com/eziriz/ReactorAction/main/versions/${os_name}_"
        download_url_2="https://www.eziriz.com/downloads/versions/${os_name}_"
        
        if [ -n "${{ inputs.version }}" ]; then
          version_formatted=$(echo "${{ inputs.version }}" | sed 's/\./_/g')
          download_url="${download_url}${version_formatted}.zip"
          download_url_2="${download_url_2}${version_formatted}.zip"
          extract_dir="dotnet_reactor_${os_name}_${version_formatted}"
        else
          download_url="${download_url}latest.zip"
          download_url_2="${download_url_2}latest.zip"
          extract_dir="dotnet_reactor_${os_name}_latest"
        fi
        
        if [ ! -f "$extract_dir/$exe_name" ]; then
        
          if ! curl --head --silent --fail $download_url; then
            download_url=$download_url_2
          fi

          if ! curl --head --silent --fail $download_url; then
            echo "The .NET Reactor version does not exist."
            exit 1
          fi
        
          echo "Downloading .NET Reactor ($download_url)..."
          curl -L $download_url -o dotNetReactor.zip || { echo "Download failed"; exit 1; }
          
          echo "Unzipping .NET Reactor to ${extract_dir}..."
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z x dotNetReactor.zip -o./${extract_dir} || { echo "Unzip failed"; exit 1; }
          else
            unzip dotNetReactor.zip -d ${extract_dir} || { echo "Unzip failed"; exit 1; }
          fi
        else
          echo "${extract_dir}/${exe_name} already exists; skipping download."
        fi
        
        echo "DOTNETREACTORROOT=$PWD/${extract_dir}" >> $GITHUB_ENV
      shell: bash
    - name: Configure License
      run: |
            if [ -n "${{ inputs.license }}" ]; then
              if echo "${{ inputs.license }}" | grep -Eq '(\.license|\.v3lic)$'; then
                cp "${{ inputs.license }}" ${{ env.DOTNETREACTORROOT }}/license.v3lic
              else
                echo "${{ inputs.license }}" | base64 --decode > ${{ env.DOTNETREACTORROOT }}/license.v3lic
              fi
            fi
      shell: bash
    - name: Execute .NET Reactor for multiple files (in-place)
      run: |
        command="${{ env.DOTNETREACTORROOT }}/dotNET_Reactor"

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          command="${{ env.DOTNETREACTORROOT }}/dotNET_Reactor.Console.exe"
        else
          chmod +x "$command"
        fi

        # Change to the working directory if specified
        if [[ -n "${{ inputs.working_directory }}" ]]; then
          echo "Changing to working directory: ${{ inputs.working_directory }}"
          cd "${{ inputs.working_directory }}" || { echo "Failed to change directory"; exit 1; }
        fi

        # Split input_paths into an array
        IFS=',' read -ra FILES <<< "${{ inputs.input_paths }}"

        for file in "${FILES[@]}"; do
          file=$(echo $file | xargs) # Trim spaces
          if [[ -n "$file" ]]; then
            if [[ ! -f "$file" ]]; then
              echo "File not found: $file"
              exit 1
            fi

            args=" -file '$file' -targetfile '$file'" # Same input & output file

            [[ -n "${{ inputs.project_file }}" ]] && args+=" -project '${{ inputs.project_file }}'"
            [[ -n "${{ inputs.key_file }}" ]] && args+=" -snkeypair  '${{ inputs.key_file }}'"
            [[ -n "${{ inputs.additional_arguments }}" ]] && args+=" ${{ inputs.additional_arguments }}"

            echo "Running: $command $args"
            eval "$command $args"
          fi
        done
      shell: bash
