name: '.NET Reactor Run'
author: Eziriz
description: 'Runs .NET Reactor based on the operating system of the GitHub Actions runner.'
branding:
  icon: 'shield'
  color: 'blue'
inputs:
  project_file:
    description: 'Path to the .NET Reactor project file.'
    required: false
  input_paths:
    description: 'Comma-separated list of .NET assemblies to obfuscate.'
    required: false
  additional_arguments:
    description: '(Additional) command-line parameters.'
    required: false

runs:
  using: "composite"
  steps:
    - name: Check and Install .NET Reactor if needed
      run: |
        os_name=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
        reactor_dir="${{ env.DOTNETREACTORROOT }}"

        exe_name="dotNET_Reactor"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          exe_name="dotNET_Reactor.Console.exe"
        fi

        if [ ! -f "$reactor_dir/$exe_name" ]; then
          echo "Installing latest .NET Reactor version..."

          extract_dir="dotnet_reactor_${os_name}_latest"
          download_url="https://raw.githubusercontent.com/eziriz/ReactorAction/main/versions/${os_name}_latest.zip"

          echo "Downloading .NET Reactor ($download_url)..."
          curl -L $download_url -o dotNetReactor.zip || { echo "Download failed"; exit 1; }

          echo "Unzipping .NET Reactor to ${extract_dir}..."
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z x dotNetReactor.zip -o./${extract_dir} || { echo "Unzip failed"; exit 1; }
          else
            unzip dotNetReactor.zip -d ${extract_dir} || { echo "Unzip failed"; exit 1; }
          fi

          echo "DOTNETREACTORROOT=$PWD/${extract_dir}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Execute .NET Reactor for multiple files (in-place)
      run: |
        command="${{ env.DOTNETREACTORROOT }}/dotNET_Reactor"

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          command="${{ env.DOTNETREACTORROOT }}/dotNET_Reactor.Console.exe"
        else
          chmod +x "$command"
        fi

        # Split input_paths into an array (supports comma, space, or newline-separated lists)
        IFS=',' read -ra FILES <<< "${{ inputs.input_paths }}"

        for file in "${FILES[@]}"; do
          file=$(echo $file | xargs) # Trim spaces
          if [[ -n "$file" ]]; then
            args=" -file '$file' -targetfile '$file'" # Same input & output file

            [[ -n "${{ inputs.project_file }}" ]] && args+=" -project '${{ inputs.project_file }}'"
            [[ -n "${{ inputs.additional_arguments }}" ]] && args+=" ${{ inputs.additional_arguments }}"

            echo "Running: $command $args"
            eval "$command $args"
          fi
        done
      shell: bash
